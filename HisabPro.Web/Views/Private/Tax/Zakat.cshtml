@inject HisabPro.Constants.ISharedViewLocalizer _localizer
@using HisabPro.Constants.Resources;
@model List<HisabPro.DTO.Model.ZakatIncomeItem>
@{
    ViewData["Title"] = @_localizer.Get(ResourceKey.LabelZakat);
    Layout = "~/Views/Shared/_PrivateLayout.cshtml";
}
<style>
    .validation-message {
        min-height: 1.25rem;
    }

    tfoot {
        border-style: none;
        background-color: #f1f1f1;
        border-color: transparent;
    }
</style>
<div class="card mb-1" style="position:relative">
    <div class="card-header d-flex justify-content-between align-items-center">
        <div class="d-flex align-items-center">
            <i class="bi bi-moon me-2"></i>
            <h5 class="mb-0 p-2">@_localizer.Get(ResourceKey.LabelZakat)</h5>
        </div>
    </div>
    <div class="grid-filter-body card-body">
        <div class="row">
            <div class="col-md-12">
                <div class="alert alert-primary d-flex align-items-start p-4 rounded-3 shadow-sm" role="alert">
                    <i class="bi bi-cash-coin me-3 fs-2 text-warning mt-1"></i>
                    <div class="flex-grow-1">
                        <h6 class="fw-bold mb-2">@_localizer.Get(ResourceKey.ZakatHead)</h6>
                        <p class="mb-2">
                            @Html.Raw(_localizer.Get(ResourceKey.ZakatHeadLine1))
                        </p>
                        <p class="mb-2">
                            @Html.Raw(_localizer.Get(ResourceKey.ZakatHeadLine2))
                        </p>

                        <div id="dvZakatMore" class="collapse">
                            <p class="mb-2">
                                @_localizer.Get(ResourceKey.ZakatMoreLine1)
                            </p>
                            <p class="mb-0 text-success fw-semibold">
                                @_localizer.Get(ResourceKey.ZakatQuote) <small class="text-muted">@_localizer.Get(ResourceKey.ZakatQuoteSource)</small>
                            </p>
                        </div>

                        <button id="btnZakatMore" class="btn btn-link btn-sm p-0" type="button">
                            @Html.Raw(_localizer.Get(ResourceKey.ShowMore))
                        </button>
                    </div>
                </div>

            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <h5>@_localizer.Get(ResourceKey.ZakatIncomes)</h5>
                <form id="dynamicForm">
                    <div class="table-responsive">
                        <table class="table table-bordered align-middle" id="dynamicTable">
                            <thead class="table-light">
                                <tr>
                                    <th style="width: 25%;">@_localizer.Get(ResourceKey.IncomeType)</th>
                                    <th style="width: 20%;">@_localizer.Get(ResourceKey.FieldAmount)</th>
                                    <th style="width: 25%;">@_localizer.Get(ResourceKey.Description)</th>
                                    <th style="width: 10%;"></th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                            <tfoot>
                                <tr>
                                    <td colspan="4" class="text-end text-primary">
                                        <div id="totalAmountDisplay" class="mt-2">
                                            @_localizer.Get(ResourceKey.TotalZakat) <span id="totalAmount">0</span> ₹
                                        </div>
                                    </td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>

                    <div class="d-flex justify-content-between">
                        <button type="button" id="addRowBtn" class="btn btn-primary">@_localizer.Get(ResourceKey.ZakatAddIncome)</button>
                        <button type="submit" class="btn btn-success">@_localizer.Get(ResourceKey.Save)</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<div id="form-view" class="loading" style="display:none">
    @_localizer.Get(ResourceKey.LabelLoading)
</div>

<partial name="_ValidationScriptsPartial" />

<script>
    var delBtn = '.deleteRowBtn';
    var invalidClass = 'is-invalid';
    var incomeContainer = '#dynamicTable tbody';
    var form = '#dynamicForm';
    var totalIncomeForZakat;
    var classIncomeType = '.incomeType';
    var classDescription = '.incomeDescription';
    var classAmount = '.incomeAmount';
    let incomeTypeForOtherId = 1000;
    let total = 0;
    let urlLoadRow = '/Tax/IncomesForZakat';
    let urlSaveZakat = '/Tax/SaveZakat';

    $(document).ready(function () {
        var btnZakatMore = $("#btnZakatMore");
        var dvZakatMore = $("#dvZakatMore");
        totalIncomeForZakat = $('#totalAmount');

        var addBtn = $('#addRowBtn');

        btnZakatMore.click(function () {
            dvZakatMore.toggle();
            if (dvZakatMore.is(":visible")) {
                btnZakatMore.html(appResources.showLess);
            } else {
                btnZakatMore.html(appResources.showMore);
            }
        })

        loadRowHtml();

        addBtn.click(() => loadRowHtml());

        $(document).on('click', delBtn, function () {
            $(this).closest('tr').remove();
            updateRowNames();
            calculateTotalAmount();
        });


        $(form).submit(function (e) {
            e.preventDefault();

            //Note: Auto validation doesn't work, if custom validation applied ('Other' selected then Description is required)
            // form.validate();
            // if (form.valid()) {

            if (validateForm()) {
                if (total > 0) {
                    ajax.submitForm(urlSaveZakat, $(form), zakatSaveSuccess);
                }
                else {
                    showNotification(appResources.zakatAmountMessage, 'warning');
                }
            }
        });

        // Optional: remove validation styles on change
        $(document).on('change keyup', 'input, select', function () {
            $(this).removeClass(invalidClass);
        });

        // When amount input is changed
        $(document).on('input', classAmount, function () {
            calculateTotalAmount();
        });
    });

    function zakatSaveSuccess(res) {
        alert(res);
    }

    function loadRowHtml() {
        ajax.html(urlLoadRow, null, successLoadRow, null);
    }

    function successLoadRow(res) {
        $(incomeContainer).append(res);
        updateRowNames();
        //Reinitialize validation for dynamic content or partial view
        $.validator.unobtrusive.parse(form);
    }

    function updateRowNames() {
        $(incomeContainer).find('tr').each(function (index, row) {
            $(row).find('select, input').each(function () {
                let name = $(this).attr('name');
                if (name) {
                    let base = name.substring(name.indexOf('.') + 1);
                    $(this).attr('name', `Items[${index}].${base}`);
                }
            });
        });
    }

    function validateForm() {
        let isValid = true;

        $(incomeContainer).find('tr').each(function () {
            const $row = $(this);
            const incomeType = $row.find(classIncomeType).val();
            const incomeDescription = $row.find(classDescription);
            const incomeAmount = $row.find(classAmount);

            // Reset validation
            $row.find('input, select').removeClass(invalidClass);

            if (!incomeType) {
                $row.find(classIncomeType).addClass(invalidClass);
                isValid = false;
            }
            if (incomeType == incomeTypeForOtherId && !incomeDescription.val().trim()) {
                incomeDescription.addClass(invalidClass);
                isValid = false;
            }

            if (!incomeAmount.val()) {
                incomeAmount.addClass(invalidClass);
                isValid = false;
            }
        });
        return isValid;
    }

    function calculateTotalAmount() {
        total = 0;
        $(classAmount).each(function () {
            const val = parseFloat($(this).val());
            if (!isNaN(val)) {
                total += val;
            }
        });

        totalIncomeForZakat.text(total.toLocaleString('en-IN'));
    }
</script>
