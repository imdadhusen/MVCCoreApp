<!-- Step 2 -->
@model IEnumerable<HisabPro.Web.ViewModel.ImportDataModel>

<div class="wizard-step" data-step="2">
    <div class="table-container">
        <div class="table-header">
            <h5>Verify Extracted Data</h5>
            <div class="action-icons">
                <button id="maximizeTable" class="btn btn-light" title="Maximize Table" style="margin-top:unset">
                    <i class="fas fa-expand"></i>
                </button>
                <button id="resetTable" class="btn btn-light d-none" title="Reset Table" style="margin-top:unset">
                    <i class="fas fa-compress"></i>
                </button>
            </div>
        </div>
        <div class="scrollable-table">
            <form id="dataForm">
                <table class="table table-bordered">
                    <thead>
                        <tr class="header">
                            <th class="widthDate">
                                Date
                                <a id="autoCorrectDate" href="#" class="headerLink" title="Click to auto correct empty date(s)">Auto Correct</a>
                            </th>
                            <th class="autoWidth">
                                Title
                                <a id="autoCorrectTitle" href="#" class="headerLink" title="Click to auto correct large title to small">Auto Correct</a>
                            </th>
                            <th class="widthAmount">Amount</th>
                            <th class="widthCategory">Category</th>
                            <th class="widthCategory">SubCategory</th>
                            <th class="widthPerson">Person</th>
                        </tr>
                    </thead>
                    <tbody id="tblData">
                        @{
                            int r = 0;
                            foreach (var data in Model)
                            {
                                r++;
                                <tr>
                                    <td>
                                        <input type="date" name="Date[@r]" value="@(data.Date.HasValue ? data.Date.Value.ToString("yyyy-MM-dd") : "")" class="form-control dateColumn" required />
                                    </td>
                                    <td>
                                        <input type="text" name="Description[@r]" maxlength="25" value="@data.Description" class="form-control titleColumn" required />
                                        <input type="hidden" name="Note[@r]" value="@data.Description" class="form-control" />
                                    </td>
                                    <td class="widthAmount">
                                        <input type="number" name="Amount[@r]" value="@data.Amount" class="form-control" required />
                                    </td>
                                    <td>
                                        <select data-text="@data.Category" asp-items="ViewBag.Categories" name="Category[@r]" class="form-control parentCategory" required data-row="@r"></select>
                                    </td>
                                    <td>
                                        <select data-text="@data.SubCategory" asp-items="null" name="SubCategory[@r]" class="form-control subCategory" required></select>
                                    </td>
                                    <td>
                                        <select data-text="@data.Person" asp-items="ViewBag.Accounts" name="Person[@r]" class="form-control account" required></select>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </form>
        </div>
    </div>
    <button type="button" class="btn btn-secondary prev">Previous</button>
    <button type="button" class="btn btn-primary next">Next</button>
</div>
<script>
    var tblData = '#tblData';
    var autoCorrectDate = '#autoCorrectDate';
    var autoCorrectTitle = '#autoCorrectTitle';
    var icnMaximize = '#maximizeTable';
    var icnReset = '#resetTable'
    var tblContainer = '.table-container';
    var tblHeader = '.table-header';
    var tblScrollable = '.scrollable-table'
    var clsFullscreen = 'fullscreen';
    var totalRows = 0;

    $(document).ready(function () {
        totalRows = $(tblData).find('tr').length;
        setDropdownItems();
        categorizeIncomes();
    })

    function setDropdownItems() {
        for (var r = 1; r <= totalRows; r++) {
            //Set category item selected
            var category = $('select[name="Category[' + r + ']"]');
            setSelectedItem(category);
            //Set account item selected
            var account = $('select[name="Person[' + r + ']"]');
            setSelectedItem(account);

            filterChildCategories(r);
            //Set subcategory item selected
            var subCategory = $('select[name="SubCategory[' + r + ']"]');
            setSelectedItem(subCategory);
        }
    }
    function setSelectedItem(drp) {
        var text = drp.data('text');
        drp.find('option').each(function () {
            if ($(this).text() == text) {
                $(this).prop('selected', true);
            }
        });
    }
    function categorizeIncomes() {
        for (var r = 1; r <= totalRows; r++) {
            const note = $(`[name="Note[${r}]"`).val();
            var searched = findCategoryAndSubcategory(note);
            if (searched) {
                if (searched.CategoryId) {
                    //Set category dropdown and then call change method to load it's sub category
                    $(`[name="Category[${r}]"`).val(searched.CategoryId).change();

                    if (searched.SubcategoryId) {
                        $(`[name="SubCategory[${r}]"`).val(searched.SubcategoryId);
                    }
                }
                // else {
                //     console.log('Couldnot able to auto select category and subcategory');
                // }
            }
        }
    }
    function findCategoryAndSubcategory(note) {
        let matchedCategory = null;
        let matchedSubcategory = null;

        // Normalize the note for matching
        let normalizedNote = note.toLowerCase();

        // Find the matching category
        $.each(allCategories, function (index, category) {
            if (normalizedNote.includes(category.Name.toLowerCase())) {
                matchedCategory = category.Id;
                return false; // Break the loop once a match is found
            }
        });

        // If a category is matched, find the associated subcategory
        if (matchedCategory) {
            $.each(allChildCategories, function (index, subcategory) {
                if (subcategory.CategoryId == matchedCategory &&
                    normalizedNote.includes(subcategory.Name.toLowerCase())) {
                    matchedSubcategory = subcategory.Id;
                    return false; // Break the loop once a match is found
                }
            });
        }

        return { CategoryId: matchedCategory, SubcategoryId: matchedSubcategory };
    }

    $(icnMaximize).click(function () {
        $(tblContainer).addClass(clsFullscreen);
        adjustTableHeight(); // Adjust height for fullscreen
        $(this).addClass('d-none'); // Hide maximize button
        $(icnReset).removeClass('d-none'); // Show reset button
    });

    $(icnReset).click(function () {
        $(tblContainer).removeClass(clsFullscreen);
        adjustTableHeight(); // Adjust height for fullscreen
        $(this).addClass('d-none'); // Hide reset button
        $(icnMaximize).removeClass('d-none'); // Show maximize button
    });
    $('.parentCategory').on('change', function () {
        filterChildCategories($(this).data('row'));
    });
    $(autoCorrectDate).click(function () {
        showConfirm(Wizard.AutoCorrect.Date.Title, Wizard.AutoCorrect.Date.Message, autoCorrectDateYes, null);
    });
    $(autoCorrectTitle).click(function () {
        showConfirm(Wizard.AutoCorrect.Title.Title, Wizard.AutoCorrect.Title.Message, autoCorrectTitleYes, null);
    });

    function filterChildCategories(row) {
        const selectedParentId = $('select[name="Category[' + row + ']"]').val();
        const drpChildCategory = $('select[name="SubCategory[' + row + ']"]');

        drpChildCategory.empty();
        drpChildCategory.append($('<option>', { value: '', text: '' }));
        $(allChildCategories).each(function (index, c) {
            if (c.CategoryId == selectedParentId) {
                drpChildCategory.append($('<option>', { value: c.Id, text: c.Name }));
            }
        });
    }
    function autoCorrectDateYes() {
        hideConfirm();
        let previousDate = null;

        // Loop through each row in the table body
        $(tblData + ' tr').each(function () {
            // Get the current row's date input
            let currentDateInput = $(this).find('.dateColumn');
            let currentDate = currentDateInput.val();

            // If the current date is empty, set it to the previous non-empty date
            if (!currentDate && previousDate) {
                currentDateInput.val(previousDate);
            }

            // Update the previousDate if the current row has a date
            if (currentDate) {
                previousDate = currentDate;
            }
        });
        showNotification(Wizard.AutoCorrect.Date.Success);
    }
    function autoCorrectTitleYes() {
        hideConfirm();
        $(tblData + ' tr').each(function () {
            // Get the current row's date input
            let field = $(this).find('.titleColumn');
            let fieldVal = field.val();
            field.val(fieldVal.substring(0, 25));
        });
        showNotification(Wizard.AutoCorrect.Title.Success);
    }
    // Adjust table height for fullscreen mode
    function adjustTableHeight() {
        const headerHeight = $(tblHeader).outerHeight();
        const availableHeight = $(window).height() - headerHeight;
        $(tblScrollable).css('height', availableHeight - 20 + 'px');
    }

    // Reset table height to default
    function resetTableHeight() {
        $(tblScrollable).css('height', '').css('max-height', '300px');
    }
    // Recalculate height on window resize (for responsiveness)
    $(window).resize(function () {
        if ($(tblContainer).hasClass(clsFullscreen)) {
            adjustTableHeight();
        }
    });
</script>