@model HisabPro.DTO.Model.ResponseDTO<HisabPro.DTO.Response.CategoryListWithChild>
@{
    ViewData["Title"] = "Items";
}

<div class="container mt-5">
    <div class="row">
        <div class="col">
            <h2 class="mb-4">Manage categories and subcategories</h2>
        </div>
        <div class="col-3">
            <a href="#" class="float-right mt-20" data-toggle="modal" data-target="#commonModal" data-title="Add Category" data-feature="AddCategory" onclick="openModal(this)">
                <i class="fas fa-plus"></i> Add Category
            </a>
        </div>
    </div>

    <!-- Grid Table -->
    <table class="table table-primary">
        <tbody id="tblCategory">
            @if (Model.Response != null && Model.Response.AllCategoryList.Count >= 1)
            {
                @foreach (var category in Model.Response.AllCategoryList)
                {
                    <tr>
                        <td>@category.Name</td>
                        <td align="right">
                            <a href="#" data-target="#commonModal" data-parentid="@category.Id" data-name="@category.Name" data-feature="AddSubcategory" onclick="openModal(this)">
                                <i class="fas fa-plus"></i> Add Subcategory
                            </a>&nbsp;|&nbsp;
                            <a href="#" data-target="#commonModal" data-id="@category.Id" data-name="@category.Name" data-feature="UpdateCategory" onclick="openModal(this)">
                                <i class="fas fa-pencil-alt"></i> Update
                            </a>&nbsp;|&nbsp;
                            <a href="#" data-id="@category.Id" onclick="openConfirm(this)">
                                <i class="fas fa-trash"></i> Delete
                            </a>
                        </td>
                    </tr>
                    <tr>
                        <td colspan="2">
                            <table class="table mb-0 table-light">
                                <tbody>
                                    @foreach (var child in category.ChildCategories.OrderBy(c => c.Name))
                                    {
                                        <tr>
                                            <td>@child.Name</td>
                                            <td align="right">
                                                <a href="#" data-target="#commonModal" data-parentid="@category.Id" data-id="@child.Id" data-name="@child.Name" data-feature="UpdateSubcategory" onclick="openModal(this)">
                                                    <i class="fas fa-pencil-alt"></i> Update
                                                </a>&nbsp;|&nbsp;
                                                <a href="#" data-parentid="@category.Id" data-id="@child.Id" onclick="openConfirm(this)">
                                                    <i class="fas fa-trash"></i> Delete
                                                </a>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="2">
                        @Model.Message
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@await Html.PartialAsync("_ModalPartial")

@section Scripts {
    <script>
        var isAddRecord = false;
        var button;
        var modalName = '#commonModal';
        var parentCatId = '#parentCategoryId';
        var parentCatName = '#txtCategoryName';
        var dvParentCatName = 'dvParentCategory';
        var lblCategoryName = 'lblCategoryName';
        var tblCategory = '#tblCategory';
        var frmCategory = 'frmCategory';
        var newlyAddedCategory = [];

        @{
            string jsonArray = "";
            if (Model.Response != null)
            {
                jsonArray = Newtonsoft.Json.JsonConvert.SerializeObject(
                Model.Response.ParentCategoryList.Select(c => new { Value = c.Id, Text = c.Name })
                );
            }
        }
            newlyAddedCategory = @Html.Raw(jsonArray);

        function refreshCategory(id, name) {
            if (name != "") {
                let category = newlyAddedCategory.find(item => item.Value === id);
                if (category) {
                    // Update the name if the category exists
                    category.Text = name;
                } else {
                    // Push a new category if it doesn't exist
                    newlyAddedCategory.push({ Value: id, Text: name });
                }
            }
            else {
                // Delete the category
                const indexToDelete = newlyAddedCategory.findIndex(item => item.Value === id);
                if (indexToDelete !== -1) {
                    newlyAddedCategory.splice(indexToDelete, 1); // Delete the item at the found index
                }
            }
        }
        function getRefreshedCategories() {
            var dynOptionsJs = '';
            for (var i = 0; i < newlyAddedCategory.length; i++) {
                dynOptionsJs += '<option value="' + newlyAddedCategory[i].Value + '">' + newlyAddedCategory[i].Text + '</option>';
            }
            var contentModal = '<form id="' + frmCategory + '"><div id="' + dvParentCatName + '" class="form-group"><label for="category-name"> Parent Category </label><select name="parentCategoryId" id="parentCategoryId" class="form-select" aria-label="Parent Category">';
            contentModal += dynOptionsJs + '</select></div><div class="form-group"><label id="' + lblCategoryName + '" asp-for="' + lblCategoryName + '"> Sub Category </label><input id="txtCategoryName" asp-for="lblCategoryName" type="text" class="form-control" name="txtCategoryName" required><span asp-validation-for="lblCategoryName" class="text-danger"></span></div></form>';
            return contentModal;
        }
        function openModal(_this) {
            button = $(_this);
            var targetModal = button.data('target');
            var feature = button.data('feature');
            var parentId = button.data('parentid');
            var text = button.data('name');
            var id = button.data('id');

            showModal(targetModal, getRefreshedCategories(), handleSaveCategory, id);

            $(parentCatName).val("");
            if (feature.indexOf('Update') > 1) {
                $(parentCatName).val(text);
            }

            switch (feature) {
                case 'AddCategory':
                case 'UpdateCategory':
                    $('#' + dvParentCatName).hide();
                    $('#' + lblCategoryName).text('Category');
                    break;
                case 'AddSubcategory':
                case 'UpdateSubcategory':
                    $('#' + dvParentCatName).show();
                    $('#' + lblCategoryName).text('Sub Category');
                    $(parentCatId).val(parentId);
                    break;
            }
        }
        function handleSaveCategory(data) {
            var urlUpdate = '/Category/Save';

            // Reinitialize jQuery Unobtrusive Validation
            $.validator.unobtrusive.parse('#' + frmCategory);
            var form = $('#' + frmCategory);
            form.validate();
            if (form.valid()) {
                var req = { Name: $(parentCatName).val() };
                if (data != undefined) {
                    req.Id = data;
                    isAddRecord = false;
                }
                else {
                    isAddRecord = true;
                }
                if ($(parentCatId).is(':visible')) {
                    req.ParentId = $(parentCatId).val();
                }

                ajax.post(urlUpdate, req, SaveSuccess);
            } else {
                console.log("Form is invalid!");
            }
        }
        function SaveSuccess(res) {
            // Logic for saving edited item
            if (res.statusCode == 200) {
                showNotification(res.message);
                // Refresh updated value in table
                var updated = res.response.name;
                var id = res.response.id;
                var tr = button.closest('tr');
                // Add or update cateogry in parent category dropdown
                refreshCategory(id, updated);

                if (isAddRecord) {
                    var parentId = res.response.parentCategoryId;
                    if (parentId > 0) {
                        //Add in child category
                        var nextTr = tr.next('tr');
                        var newtr = $('<tr><td>' + updated + '</td><td align="right"><a href="#" data-target="#commonModal" data-parentid="' + parentId + '" data-id="' + id + '" data-name="' + updated + '" data-feature="UpdateSubcategory" onclick="openModal(this)"><i class="fas fa-pencil-alt"></i> Update</a>&nbsp;|&nbsp;<a href="#" data-parentid="' + parentId + '" data-id="' + id + '" onclick="openConfirm(this)"><i class="fas fa-trash"></i> Delete</a></td></tr>');
                        // Add new row to the <tbody> to add it at the top
                        nextTr.find('table tbody').prepend(newtr);
                        highlightSaveRow(newtr);
                    }
                    else {
                        //Add in main category
                        tr = $('<tr><td>' + updated + '</td><td align="right"><a href="#" data-target="#commonModal" data-parentid="' + id + '" data-name="' + updated + '" data-feature="AddSubcategory" onclick="openModal(this)"><i class="fas fa-plus"></i> Add Subcategory</a>&nbsp;|&nbsp;<a href="#" data-target="#commonModal" data-id="' + id + '" data-name="' + updated + '" data-feature="UpdateCategory" onclick="openModal(this)"><i class="fas fa-pencil-alt"></i> Update</a>&nbsp;|&nbsp;<a href="#" data-id="' + id + '" onclick="openConfirm(this)"><i class="fas fa-trash"></i> Delete</a></td></tr><tr><td colspan="2"><table class="table mb-0 table-light"><tbody></tbody></table></td></tr>');
                        $(tblCategory).prepend(tr);
                        highlightSaveRow($(tblCategory + ' tr:first'));
                    }
                }
                else {
                    tr.find('td:first').text(updated);
                    button.data("name", updated);
                    highlightSaveRow(tr);
                }
            }
            $(modalName).modal('hide');
        }

        function openConfirm(_this) {
            var button = $(_this);
            var data = { 'Data': { 'Id': button.data('id'), 'ParentId': button.data('parentid') }, 'Row': button.closest('tr') };
            showConfirm("Delete Category", null, handleYes, data);
        }
        function handleYes(data) {
            hideConfirm();
            var urlDelete = '/Category/Delete';
            ajax.post(urlDelete, data.Data, deleteSuccess, data);
        }
        function deleteSuccess(res) {
            if (res.statusCode == 200) {
                showNotification(res.message);
                //Delete from category dropdown
                refreshCategory(res.additionalData.Data.Id);
                //Delete row from UI
                highlightDeleteRow(res.additionalData.Row);
            }
        }
    </script>
}
