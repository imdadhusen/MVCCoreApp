<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="FieldEmail" xml:space="preserve">
    <value>Email Address</value>
  </data>
  <data name="FieldPassword" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="FieldRememberMe" xml:space="preserve">
    <value>Remember me?</value>
  </data>
  <data name="LabelAboutUs" xml:space="preserve">
    <value>About Us</value>
  </data>
  <data name="LabelAccount" xml:space="preserve">
    <value>Account</value>
  </data>
  <data name="LabelActivationFailed" xml:space="preserve">
    <value>Activation Failed</value>
  </data>
  <data name="LabelActivationFailedMessage" xml:space="preserve">
    <value>We're sorry, but your account activation could not be completed. This may have happened for one of the following reasons:</value>
  </data>
  <data name="LabelActivationFailedReason1" xml:space="preserve">
    <value>The activation link has expired.</value>
  </data>
  <data name="LabelActivationFailedReason2" xml:space="preserve">
    <value>The activation link has already been used.</value>
  </data>
  <data name="LabelActivationFailedReason3" xml:space="preserve">
    <value>There was an issue processing your request.</value>
  </data>
  <data name="LabelActivationFailedTitle" xml:space="preserve">
    <value>User Activation Failed</value>
  </data>
  <data name="LabelActivationHead" xml:space="preserve">
    <value>Activation Successful</value>
  </data>
  <data name="LabelActivationMessage" xml:space="preserve">
    <value>Congratulations! Your account has been successfully activated. To access your account, please set a password.</value>
  </data>
  <data name="LabelActivationTitle" xml:space="preserve">
    <value>User Activation Successful</value>
  </data>
  <data name="LabelAutoCorrect" xml:space="preserve">
    <value>Auto Correct</value>
  </data>
  <data name="LabelChangePassword" xml:space="preserve">
    <value>Change Password</value>
  </data>
  <data name="LabelCheckEmail" xml:space="preserve">
    <value>Check Your Email!</value>
  </data>
  <data name="LabelColumnAmount" xml:space="preserve">
    <value>Amount</value>
  </data>
  <data name="LabelColumnCategory" xml:space="preserve">
    <value>Category</value>
  </data>
  <data name="LabelColumnDate" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="LabelColumnPerson" xml:space="preserve">
    <value>Person</value>
  </data>
  <data name="LabelColumnSubCategory" xml:space="preserve">
    <value>SubCategory</value>
  </data>
  <data name="LabelColumnTitle" xml:space="preserve">
    <value>Title</value>
  </data>
  <data name="LabelConfirmPassword" xml:space="preserve">
    <value>Confirm Password</value>
  </data>
  <data name="LabelContact" xml:space="preserve">
    <value>Contact</value>
  </data>
  <data name="LabelContactSupport" xml:space="preserve">
    <value>Contact Support</value>
  </data>
  <data name="LabelContactSupportMessage" xml:space="preserve">
    <value>If you need assistance, please contact our support team</value>
  </data>
  <data name="LabelCreateNew" xml:space="preserve">
    <value>Create New</value>
  </data>
  <data name="LabelDashboard" xml:space="preserve">
    <value>Dashboard</value>
  </data>
  <data name="LabelDeleteAccount" xml:space="preserve">
    <value>Delete Account</value>
  </data>
  <data name="LabelDeleteExpense" xml:space="preserve">
    <value>Delete Expense</value>
  </data>
  <data name="LabelDeleteIncome" xml:space="preserve">
    <value>Delete Income</value>
  </data>
  <data name="LabelDeleteUser" xml:space="preserve">
    <value>Delete User</value>
  </data>
  <data name="LabelEmailActivation" xml:space="preserve">
    <value>We have sent you an account activation link. Please check your email to activate your account and set your password before logging in.</value>
  </data>
  <data name="LabelExpense" xml:space="preserve">
    <value>Expense</value>
  </data>
  <data name="LabelHello" xml:space="preserve">
    <value>Hello</value>
  </data>
  <data name="LabelHere" xml:space="preserve">
    <value>here</value>
  </data>
  <data name="LabelHome" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="LabelImportExpense" xml:space="preserve">
    <value>Import Expense</value>
  </data>
  <data name="LabelImportExpenseMessage" xml:space="preserve">
    <value>If you would like to add multiple expenses from the Excel file,
you can use the Import feature, which will streamline your experience by categorizing each expense appropriately.
You can get more details</value>
  </data>
  <data name="LabelImportExpenseWizard" xml:space="preserve">
    <value>Import Expense Wizard</value>
  </data>
  <data name="LabelImportExtractColumnDateCorrect" xml:space="preserve">
    <value>Click to auto correct empty date(s)</value>
  </data>
  <data name="LabelImportExtractColumnTitleCorrect" xml:space="preserve">
    <value>Click to auto correct large title to small</value>
  </data>
  <data name="LabelImportExtractMaximizeTable" xml:space="preserve">
    <value>Maximize Table</value>
  </data>
  <data name="LabelImportExtractResetTable" xml:space="preserve">
    <value>Reset Table</value>
  </data>
  <data name="LabelImportExtractTitle" xml:space="preserve">
    <value>Verify Extracted Data</value>
  </data>
  <data name="LabelImportFile" xml:space="preserve">
    <value>Choose file</value>
  </data>
  <data name="LabelImportFileTitle" xml:space="preserve">
    <value>Upload File</value>
  </data>
  <data name="LabelImportIncomes" xml:space="preserve">
    <value>Import Incomes</value>
  </data>
  <data name="LabelImportIncomesMessage" xml:space="preserve">
    <value>If you would like to add multiple expenses from the Excel file,
you can use the Import feature, which will streamline your experience by categorizing each expense appropriately.
You can get more details</value>
  </data>
  <data name="LabelImportIncomesWizard" xml:space="preserve">
    <value>Import Incomes Wizard</value>
  </data>
  <data name="LabelImportWizardError" xml:space="preserve">
    <value>An error occurred. Please fix the highlighted fields.</value>
  </data>
  <data name="LabelImportWizardStep1" xml:space="preserve">
    <value>Import Data File</value>
  </data>
  <data name="LabelImportWizardStep2" xml:space="preserve">
    <value>Extraction &amp; Validation</value>
  </data>
  <data name="LabelImportWizardStep3" xml:space="preserve">
    <value>Import Summary</value>
  </data>
  <data name="LabelIncome" xml:space="preserve">
    <value>Income</value>
  </data>
  <data name="LabelLoading" xml:space="preserve">
    <value>Loading, please wait...</value>
  </data>
  <data name="LabelLogin" xml:space="preserve">
    <value>Login</value>
  </data>
  <data name="LabelLogout" xml:space="preserve">
    <value>Logout</value>
  </data>
  <data name="LabelNewPassword" xml:space="preserve">
    <value>New Password</value>
  </data>
  <data name="LabelNext" xml:space="preserve">
    <value>Next</value>
  </data>
  <data name="LabelPasswordResetRequired" xml:space="preserve">
    <value>Your account requires a password reset for security reasons. Please reset your password to continue using your account.</value>
  </data>
  <data name="LabelPrevious" xml:space="preserve">
    <value>Previous</value>
  </data>
  <data name="LabelPrivacy" xml:space="preserve">
    <value>Privacy</value>
  </data>
  <data name="LabelProfile" xml:space="preserve">
    <value>Profile</value>
  </data>
  <data name="LabelRegisterUser" xml:space="preserve">
    <value>Register User</value>
  </data>
  <data name="LabelSave" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="LabelSaveAccount" xml:space="preserve">
    <value>Save Account</value>
  </data>
  <data name="LabelSaveExpense" xml:space="preserve">
    <value>Save Expense</value>
  </data>
  <data name="LabelSaveIncome" xml:space="preserve">
    <value>Save Income</value>
  </data>
  <data name="LabelSaveUser" xml:space="preserve">
    <value>Save User</value>
  </data>
  <data name="LabelSummaryCongratulation" xml:space="preserve">
    <value>Congratulation! Bulk data import completed successfully!</value>
  </data>
  <data name="LabelSummaryImported" xml:space="preserve">
    <value>Data Imported</value>
  </data>
  <data name="LabelSummaryNote" xml:space="preserve">
    <value>If you would like to review or modify any specific data, please click</value>
  </data>
  <data name="LabelSummaryTotalRecords" xml:space="preserve">
    <value>Total Records</value>
  </data>
  <data name="LabelSummaryTotalTime" xml:space="preserve">
    <value>Total Time</value>
  </data>
  <data name="LabelUpdatePassword" xml:space="preserve">
    <value>Update Password</value>
  </data>
  <data name="LabelUser" xml:space="preserve">
    <value>User</value>
  </data>
  <data name="MessageWelcome" xml:space="preserve">
    <value>Welcome to HisabPro!</value>
  </data>
  <data name="ValidationInvalidEmail" xml:space="preserve">
    <value>Please enter a valid email.</value>
  </data>
  <data name="ValidationRequiredEmail" xml:space="preserve">
    <value>Email is required.</value>
  </data>
  <data name="ValidationRequiredPassword" xml:space="preserve">
    <value>Password is required.</value>
  </data>
</root>